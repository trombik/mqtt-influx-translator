---

influxdb:
  auth_method: basic_auth
  username: user
  password: password
  database: mydatabase
  time_precision: ns
  hosts:
    - influxdb.example.org
paho-mqtt:
  host: hab.i.trombik.org
  ssl: false
  reconnect_delay: 10
  client_id: mqtt-influxdb-translator
  persistent: true

log_level: DEBUG
log_file: /dev/null
topics:
  - ["homie/+/esp/uptime", 1]
  - ["homie/+/esp/freeheap", 1]
  - ["homie/+/esp/rssi", 1]
  - ["homie/+/esp/signal", 1]
lookup_topics:
  - ["homie/+/esp/location", 1]
translate: |
  # the translation logic, will be executed with ruby's `eval`.
  #
  # Available variables:
  #
  # * topic, MQTT topic string
  # * value, value of the topic. note that the value is always String. if the
  #   value is number, use `value.to_i`, or `value.to_f`.
  # * timestamp, nano sec when the value is fetched
  #
  # this ruby fragment must return a list of `name` and `data`.
  # they are arguments for InfluxDB#write_point. See
  # https://github.com/influxdata/influxdb-ruby
  #
  (_dummy, mac_addr, node_name, attribute_name) = topic.split("/")
  data = {
    values: { attribute_name => value.to_i },
    tags: { mac_addr: mac_addr },
    timestamp: timestamp
  }
  if @lookup.key?(mac_addr) && @lookup[mac_addr].key?("location")
    data[:tags][:location] = @lookup[mac_addr]["location"]
  end
  return [node_name, data]

lookup_translate: |
  (_dummy, mac_addr, node_name, attribute_name) = topic.split("/")
  @lookup[mac_addr] = { attribute_name => value }
